print('Задача 6. Яйца')

# В рамках программы колонизации Марса
# компания «Спейс Инжиниринг» вывела особую породу черепах,
# которые, по задумке, должны размножаться, откладывая яйца в марсианском грунте.
# Откладывать яйца слишком близко к поверхности опасно из-за радиации,
# а слишком глубоко — из-за давления грунта и недостатка кислорода.
# Вообще, факторов очень много,
# но специалисты проделали большую работу и предположили,
# что уровень опасности для черепашьих яиц рассчитывается по формуле
# D = x**3 − 3x**2 − 12x + 10,
# где x — глубина кладки в метрах,
# а D — уровень опасности в условных единицах.
#
# Для тестирования гипотезы
# нужно взять пробу грунта на безопасной, согласно формуле, глубине.
#
# Напишите программу,
# находящую такое значение глубины "х", при котором уровень опасности как можно более близок к нулю.
# На вход программе подаётся максимально допустимое отклонение уровня опасности от нуля,
# а программа должна рассчитать приблизительное значение "х",
# удовлетворяющее этому отклонению.
#
# Известно, что глубина точно больше нуля и меньше четырёх метров.
#
# Обеспечьте контроль ввода.
#
# Пример:
# Введите максимально допустимый уровень опасности: 0.01
#
# Приблизительная глубина безопасной кладки: 0.732421875 м


# Solution !! ->
# Для решения этой задачи, мы можем использовать метод численного анализа,
# такой как метод бисекции, который позволит найти корень уравнения
# ( D(x) = x^3 - 3x^2 - 12x + 10 ), учитывая, что нужно найти
# такое значение ( x ), для которого ( D ) близко к нулю.
# Метод бисекции находит корень функции путем разбиения интервала
# пополам и выбора подинтервала, на концах которого функция принимает
# значения разных знаков.
# https://fb.ru/article/545523/2023-metod-bisektsii-chto-eto-takoe-i-kak-primenyaetsya
# https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%BE%D0%B4_%D0%B1%D0%B8%D1%81%D0%B5%D0%BA%D1%86%D0%B8%D0%B8
# https://scask.ru/i_book_clm.php?id=33
# https://scienceforum.ru/2019/article/2018012139

# Функция для расчета уровня опасности
def danger_level(depth):
    return depth**3 - 3 * depth**2 - 12 * depth + 10

# Функция для поиска глубины методом бисекции
def find_safe_depth(epsilon):
    left, right = 0, 4  # глубина от 0 до 4 метров
    while right - left > epsilon:
        middle = (left + right) / 2
        if danger_level(middle) * danger_level(left) <= 0:
            right = middle
        else:
            left = middle
    return (left + right) / 2

# Функция для контроля ввода
def input_control(prompt):
    while True:
        try:
            value = float(input(prompt))
            if value <= 0:
                raise ValueError("Введите положительное число.")
            return value
        except ValueError as e:
            print(e)


def main():
    # Получаем ввод от пользователя и проверяем его
    epsilon = input_control("Введите максимально допустимый уровень опасности: ")

    # Ищем безопасную глубину с учетом максимального отклонения
    safe_depth = find_safe_depth(epsilon)

    # Выводим информацию о приблизительной глубине безопасной кладки
    print(f"Приблизительная глубина безопасной кладки: {safe_depth} м")

# Вызов основной функции
main()
